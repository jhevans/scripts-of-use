#!/bin/bash


# Read any named params provided to a script
# To use in another script use the following snippet:
# source get_params <<< $@

vars=
while [ $# -gt 0 ]; do

   if [[ $1 == *"--"* ]]; then
        param="${1/--/}"
        value="$2"
        declare $param=$value

      vars="$vars$param=$value,"
   fi

  shift
done

if [ "$debug" = "true" ]; then
  echo "ℹ️  Running in debug mode"
  echo "🐛 The following parameters have been passed:"
  for var in ${vars//,/ }
  do
    echo "► $var"
  done
fi

if [ "$log_level" = "trace" ]; then
  echo "🔊 Log level is trace, setting xtrace"
  set -x
fi

# TODO: Not sure this should live here
# TODO: Make it a function
if [ "$data_table" != "" ]; then
# This script will extract entries from a dBeaver/Postgres formatted table dump

#  Example table structure:
#  pnc          |forename   |surname      |
#  -------------+-----------+-------------+
#  2000/1235678G|"Nigel"    |"Legin"      |

# Example object_structure (note this relies on ordering *not* the headers in the table - these are ignored:
# TODO: It should really just unpack using the headers rather than this daftness
# object_structure='{"pnc": .[0],"forename": .[1],"surname": .[2]}'

  if [ "$debug" = "true" ]; then
    echo "🗃 Found this data:"
    cat $data_table
  fi

  # TODO: come up with an appropriate namespace for this kind of stuff
  data=$(tail -n +2 $data_table | sed s/\"//g | sed "/^$/d" | sed "s/ //g" | jq --slurp --raw-input  \
      "split(\"\n\") | .[1:] | map(split(\"|\")) |
          map($object_structure)" | \
  jq --compact-output '.[]')
fi
